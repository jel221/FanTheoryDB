// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TheoryDBClient is the client API for TheoryDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheoryDBClient interface {
	PutTheory(ctx context.Context, in *PutTheoryRequest, opts ...grpc.CallOption) (*PutTheoryReply, error)
	GetTheory(ctx context.Context, in *GetTheoryRequest, opts ...grpc.CallOption) (*GetTheoryReply, error)
}

type theoryDBClient struct {
	cc grpc.ClientConnInterface
}

func NewTheoryDBClient(cc grpc.ClientConnInterface) TheoryDBClient {
	return &theoryDBClient{cc}
}

func (c *theoryDBClient) PutTheory(ctx context.Context, in *PutTheoryRequest, opts ...grpc.CallOption) (*PutTheoryReply, error) {
	out := new(PutTheoryReply)
	err := c.cc.Invoke(ctx, "/TheoryDB/PutTheory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theoryDBClient) GetTheory(ctx context.Context, in *GetTheoryRequest, opts ...grpc.CallOption) (*GetTheoryReply, error) {
	out := new(GetTheoryReply)
	err := c.cc.Invoke(ctx, "/TheoryDB/GetTheory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheoryDBServer is the server API for TheoryDB service.
// All implementations must embed UnimplementedTheoryDBServer
// for forward compatibility
type TheoryDBServer interface {
	PutTheory(context.Context, *PutTheoryRequest) (*PutTheoryReply, error)
	GetTheory(context.Context, *GetTheoryRequest) (*GetTheoryReply, error)
	mustEmbedUnimplementedTheoryDBServer()
}

// UnimplementedTheoryDBServer must be embedded to have forward compatible implementations.
type UnimplementedTheoryDBServer struct {
}

func (UnimplementedTheoryDBServer) PutTheory(context.Context, *PutTheoryRequest) (*PutTheoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTheory not implemented")
}
func (UnimplementedTheoryDBServer) GetTheory(context.Context, *GetTheoryRequest) (*GetTheoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheory not implemented")
}
func (UnimplementedTheoryDBServer) mustEmbedUnimplementedTheoryDBServer() {}

// UnsafeTheoryDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheoryDBServer will
// result in compilation errors.
type UnsafeTheoryDBServer interface {
	mustEmbedUnimplementedTheoryDBServer()
}

func RegisterTheoryDBServer(s grpc.ServiceRegistrar, srv TheoryDBServer) {
	s.RegisterService(&TheoryDB_ServiceDesc, srv)
}

func _TheoryDB_PutTheory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTheoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheoryDBServer).PutTheory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TheoryDB/PutTheory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheoryDBServer).PutTheory(ctx, req.(*PutTheoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheoryDB_GetTheory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheoryDBServer).GetTheory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TheoryDB/GetTheory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheoryDBServer).GetTheory(ctx, req.(*GetTheoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TheoryDB_ServiceDesc is the grpc.ServiceDesc for TheoryDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheoryDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TheoryDB",
	HandlerType: (*TheoryDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutTheory",
			Handler:    _TheoryDB_PutTheory_Handler,
		},
		{
			MethodName: "GetTheory",
			Handler:    _TheoryDB_GetTheory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
